import random
from Crypto.Util.number import bytes_to_long, long_to_bytes, isPrime, inverse, GCD
from math import ceil
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA


from gmpy2 import is_square, is_prime
# N should be odd
def FermatFactor(N): # BAD Implem
	a = ceil(N**2)
	b2 = a**2 - N
	while True :
		if is_square(b2):
			return int( a - sqrt(b2) )		
		a += 1
		b2 = a**2 - N

def isqrt(n):
	x=n
	y=(x+n//x)//2
	while(y<x):
		x=y
		y=(x+n//x)//2
	return x

def fermat(n): # => https://raw.githubusercontent.com/d4rkvaibhav/Fermat-Factorization/master/fermat.py
	t0=isqrt(n)+1
	counter=0
	t=t0+counter
	temp=isqrt((t*t)-n)
	while((temp*temp)!=((t*t)-n)):
		counter+=1
		t=t0+counter
		temp=isqrt((t*t)-n)
	s=temp
	p=t+s
	q=t-s
	#print("p : ",int(p))
	#print("q : ",int(q))
	return p,q

def marinSecrets(n,e,c):

	bitLength = n.bit_length() #// 2
	prime = 2
	for _ in range(bitLength):
		prime = prime << 1
		#print(prime.bit_length())
		if n % (prime - 1) == 0:
			p = prime - 1
			q = n // p
			break
	
	#print(p,q)
	phi = (p-1)*(q-1)
	d = inverse(e, phi)
	m = pow(c,d,n)
	return long_to_bytes(m).decode()
	


import subprocess
def factorDB(N):
    out = subprocess.run(['factordb', str(N)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return out.stdout.decode()

def fastPrimes(): # Real attack (Coppersmith, Pohlig-hellman...) => https://gist.github.com/zademn/6becc979f65230f70c03e82e4873e3ec
	with open("4.RSA/4.Primes_2/key_FastPrimes.pem", 'r') as f:
		key = f.read().rstrip('\n')
	pubKey = RSA.importKey(key)
	n = pubKey.n
	e = pubKey.e

	print('n bit_legth : ', n.bit_length())

	with open("4.RSA/4.Primes_2/ciphertext_FastPrimes.txt", 'r') as f:
		ciphertext = f.read().rstrip('\n')
		c = long_to_bytes(int(ciphertext,16))

	print( factorDB(n) )
	p = int(input('p : '))
	q = int(input('q : '))
	
	phi = (p - 1) * (q - 1)
	d = inverse(e, phi)

	privKey = RSA.construct((n, e, d))
	cipher = PKCS1_OAEP.new(privKey)
	plaintext = cipher.decrypt(c)
	print(plaintext.decode())

import time
def RonVSWhit(): # => https://sbseminar.wordpress.com/2012/02/16/the-recent-difficulties-with-rsa/
	pubKeys = [0] # just to remove index "0"
	pubExps = [0]
	#for idx, i in enumerate(range(1,51)):
	for i in range(1,51):
		with open("4.RSA/4.Primes_2/keys_and_messages_RonVSWhit/"+str(i)+".pem", 'r') as f:
			key = f.read().rstrip('\n')
		pubKey = RSA.importKey(key)
		n = pubKey.n
		e = pubKey.e
		pubKeys.append(n)
		pubExps.append(e)
		#print(i, ":", e, n.bit_length(), n)
	
	
	for n1 in pubKeys:
		for n2 in pubKeys:
			p = GCD(n1,n2)
			if p != 1 and p != n1 and p != n2:
				q = n1 // p # == n2 // p
				#print(p,q)
				#print(n1)
				ind = pubKeys.index(n1) # Use of Dico : https://github.com/onealmond/hacking-lab/blob/master/cryptohack/ron-was-wrong%2Cwhit-is-right/decrypt.py
				e = pubExps[ind]
				#print(e)
				phi = (p-1) * (q-1)
				d = inverse(e, phi)
				#print(ind)
				with open("4.RSA/4.Primes_2/keys_and_messages_RonVSWhit/"+str(ind)+".ciphertext", 'r') as f:
					ciphertext = f.read().rstrip('\n')
				c = long_to_bytes( int(ciphertext,16) )

				key = RSA.construct((n1, e, d))
				plain = PKCS1_OAEP.new(key)
				plaintext = plain.decrypt(c)

				return plaintext.decode()

def main():
	#n = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
	#print(FermatFactor(n))
	"""
	p,q=fermat(n)
	
	e = 65537
	c = 98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389
	phi = (p-1)*(q-1)
	d = inverse(e, phi)
	m = pow(c,d,n)
	print(long_to_bytes(m).decode())
	"""

	# n = 658416274830184544125027519921443515789888264156074733099244040126213682497714032798116399288176502462829255784525977722903018714434309698108208388664768262754316426220651576623731617882923164117579624827261244506084274371250277849351631679441171018418018498039996472549893150577189302871520311715179730714312181456245097848491669795997289830612988058523968384808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401667388622228362042717054014679032953441034021506856017081062617572351195418505899388715709795992029559042119783423597324707100694064675909238717573058764118893225111602703838080618565401139902143069901117174204252871948846864436771808616432457102844534843857198735242005309073939051433790946726672234643259349535186268571629077937597838801337973092285608744209951533199868228040004432132597073390363357892379997655878857696334892216345070227646749851381208554044940444182864026513709449823489593439017366358869648168238735087593808344484365136284219725233811605331815007424582890821887260682886632543613109252862114326372077785369292570900594814481097443781269562647303671428895764224084402259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457 
	# e = 65537
	# c = 400280463088930432319280359115194977582517363610532464295210669530407870753439127455401384569705425621445943992963380983084917385428631223046908837804126399345875252917090184158440305503817193246288672986488987883177380307377025079266030262650932575205141853413302558460364242355531272967481409414783634558791175827816540767545944534238189079030192843288596934979693517964655661507346729751987928147021620165009965051933278913952899114253301044747587310830419190623282578931589587504555005361571572561916866063458812965314474160499067525067495140150092119620928363007467390920130717521169105167963364154636472055084012592138570354390246779276003156184676298710746583104700516466091034510765027167956117869051938116457370384737440965109619578227422049806566060571831017610877072484262724789571076529586427405780121096546942812322324807145137017942266863534989082115189065560011841150908380937354301243153206428896320576609904361937035263985348984794208198892615898907005955403529470847124269512316191753950203794578656029324506688293446571598506042198219080325747328636232040936761788558421528960279832802127562115852304946867628316502959562274485483867481731149338209009753229463924855930103271197831370982488703456463385914801246828662212622006947380115549529820197355738525329885232170215757585685484402344437894981555179129287164971002033759724456
	# print( marinSecrets(n,e,c) )

	#fastPrimes()
	
	print(RonVSWhit())

if __name__ == '__main__':
	main()

