from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCD, isPrime

import subprocess
def factorDB(N):
    out = subprocess.run(['factordb', str(N)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return out.stdout.decode()


def primes():
    """infinite generator of all prime numbers.
    >>> for p in primes():
    ...     print(p)
    ...     if p > 100:
    ...         break
    """

    yield 2 
    D = {}  
    q = 3   
    while True:
        two_p = D.pop(q, None)  
        if two_p:               
            x = q + two_p           
            while x in D:           
                x += two_p          
            D[x] = two_p            
             
        else:                   
            D[q*q] = 2*q        
            yield q
        q += 2

def inferius():
    e = 3

    # n will be 8 * (100 + 100) = 1600 bits strong which is pretty good
    while True:
        p = getPrime(100)
        q = getPrime(100)
        phi = (p - 1) * (q - 1)
        d = inverse(e, phi)
        if d != -1 and GCD(e, phi) == 1 :
            break

    n = p * q
    
    ## HERE ##
    #print( factorDB(n) ) # possible to do bruteforce using all prime inferior to 2**100 (highest 100 bits number) / see the 'primes()' function
    
    # p = int(input('p : '))
    # q = int(input('q : '))

    flag = b"XXXXXXXXXXXXXXXXXXXXXXX"
    pt = bytes_to_long(flag)
    ct = pow(pt, e, n)

    print(f"n = {n}")
    print(f"e = {e}")
    print(f"ct = {ct}")

    #return n, ct, e
    #with p and q, compute 'd' then decrypt :
    d = inverse(e, eulerTotient(p, q))
    pt = pow(ct, d, n)
    decrypted = long_to_bytes(pt)
    #assert decrypted == flag
    print(decrypted)

def decRSAfactorDB(n,e,ct):
    print(factorDB(n))
    p = int(input('p : '))
    q = int(input('q : '))
    d = inverse(e, eulerTotient(p, q))
    pt = pow(ct, d, n)
    decrypted = long_to_bytes(pt)
    return decrypted.decode()


def monoprime(n,e,ct):
    p = n
    d = inverse(e, p-1) # p-1 = n-1 # => https://interstices.info/nombres-premiers-et-cryptologie-lalgorithme-rsa/
    pt = pow(ct, d, n)
    decrypted = long_to_bytes(pt)
    return decrypted.decode()

def squareEyes(n,e,ct): 
    # n = p*p # => https://math.stackexchange.com/questions/2912792/calculate-eulers-totient-function-for-perfect-squares
    #phi_n = p*(p-1)
    """ 
    >>> import gmpy2
    >>> n = gmpy2.mpz(N)
    >>> gmpy2.get_context().precision=2048
    >>> p = gmpy2.sqrt(n)
    """
    # => https://stackoverflow.com/questions/47854635/square-root-of-a-number-greater-than-102000-in-python-3
    p = 23148667521998097720857168827790771337662483716348435477360567409355026169165934446949809664595523770853897203103759106983985113264049057416908191166720008503275951625738975666019029172377653170602440373579593292576530667773951407647222757756437867216095193174201323278896027294517792607881861855264600525772460745259440301156930943255240915685718552334192230264780355799179037816026330705422484000086542362084006958158550346395941862383925942033730030004606360308379776255436206440529441711859246811586652746028418496020145441513037535475380962562108920699929022900677901988508936509354385660735694568216631382653107
    d = inverse(e, p*(p-1)) # => https://www.doc.ic.ac.uk/~mrh/330tutor/ch05s02.html 
    pt = pow(ct, d, n)
    decrypted = long_to_bytes(pt)
    return decrypted.decode()

def manyprime(n,e,ct):
    #Sage # Possible to use FactorDB
    """
    from sage.interfaces.ecm import ECM
    ec = ECM()
    return ec.factor(N)
    #return ec.find_factor(N)
    """
    factors = [9282105380008121879,9303850685953812323,9389357739583927789,10336650220878499841,10638241655447339831,11282698189561966721,11328768673634243077,11403460639036243901,11473665579512371723,11492065299277279799,11530534813954192171,11665347949879312361,12132158321859677597,12834461276877415051,12955403765595949597,12973972336777979701,13099895578757581201,13572286589428162097,14100640260554622013,14178869592193599187,14278240802299816541,14523070016044624039,14963354250199553339,15364597561881860737,15669758663523555763,15824122791679574573,15998365463074268941,16656402470578844539,16898740504023346457,17138336856793050757,17174065872156629921,17281246625998849649]
    #factors = [9282105380008121879,9303850685953812323,9389357739583927789,10336650220878499841,10638241655447339831,11282698189561966721,11328768673634243077,11403460639036243901,11473665579512371723,11492065299277279799,11530534813954192171,11665347949879312361,12132158321859677597,12834461276877415051,12955403765595949597,12973972336777979701,13099895578757581201,13572286589428162097,14100640260554622013,14178869592193599187,14278240802299816541,14523070016044624039,14963354250199553339,15364597561881860737,15669758663523555763,15824122791679574573,15998365463074268941,16656402470578844539,16898740504023346457,17138336856793050757,17174065872156629921,17281246625998849649]
    prod = 1
    for f in factors:
        prod *= f
    
    assert n == prod

    for f in factors:
        print(f)
        assert isPrime(f)
    
    phi_n = 1
    for f in factors:
        phi_n = phi_n * (f-1)

    d = inverse(e, phi_n)
    pt = pow(ct, d, n)
    decrypted = long_to_bytes(pt)
    print(decrypted.decode())

def main():
    # N = 510143758735509025530880200653196460532653147
    # f = factorDB(N)
    # print(f)

    ## IT'S LONG ##
    # N, ct, e = inferius()
    # for p in primes():
    #     print(p)
    #     if (N % p) == 0:
    #         q = N // p
    #         d = inverse(e, eulerTotient(p, q))
    #         pt = pow(ct, d, n)
    #         decrypted = long_to_bytes(pt)
    #         #assert decrypted == flag
    #         print(decrypted)
    #         break
    #     if p > 2**100:
    #         break
    
    #inferius()
    # n = 742449129124467073921545687640895127535705902454369756401331
    # e = 3
    # ct = 39207274348578481322317340648475596807303160111338236677373
    #print(decRSA(n,e,ct))

    #monoprime()
    # n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591                                                                  
    # e = 65537
    # ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942  
    # print(monoprime(n, e, ct))

    # N = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449
    # e = 65537
    # ct = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896
    # print(squareEyes(N, e, ct))
    
    # n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
    # e = 65537
    # ct = 320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464
    # manyprime(n,e,ct)
    # Too many small factors is not a good business
    pass

if __name__ == '__main__':
	main()