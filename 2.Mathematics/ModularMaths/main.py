"""
Bruteforce to find the square root

s : quadratic residue
p : modulus
"""
def bruteSquareRoot(s, p):
    for i in range(1,p):
        if pow(i, 2, p) == s:
            return i
    return None

"""
Find out if the quadratic residue exists
"""
def legendreSymbole(a, p):
    test = pow(a,(p-1)//2,p)
    if test == 1:
        return 'R'
    elif test == -1:
        return 'NR'
    elif test == 0:
        return '0'

def tonelliShanks(a, p): # SAGE // # https://medium.com/@pavanipoluru.21.01/cryptohack-mathematics-d0f691fffe4e
    from sage.rings.finite_rings.integer_mod import square_root_mod_prime
    res = square_root_mod_prime(Mod(a, p), p)
    return res

def tonelli(n, p):
    assert legendre(n, p) == 1, "not a square (mod p)"
    q = p - 1
    S = 0
    while q % 2 == 0: #(p-1) %2
        q //= 2
        s += 1
    if s == 1: #2^1 * q = p-18, p= 3 mod 4 la
        return pow(n, (p + 1) // 4, p)
    for z in range (2, p): #quadratic non-residue (z)
        if p-1 == legendre (z, p):
            break
    c = pow(z, q, p) # c <- z^q
    r = pow(n, (q + 1) // 2, p) # r <- n^q
    t = pow(n, q, p) # t <- n^q
    m = s # m <-s
    t2 = 0
    while (t-1) % p != 0: #t=0 or t=1
        t2 = (t*t) % p
        for i in range (1, m): #0<i<m t^2*i = 1
            if (t2-1) % p == 0:
                break
            t2 = (t2*t2) % p
    b = pow (c, 1 << (m - i - 1), p) # b <- c^2m-1-1
    r = (r*b) % p # r<-rb
    c = (b*b) % p # c < -b^2
    t = (t*c) % p # t <-t*b^2
    m = i #m <- i
    return r

def mul_inv(a, b): 
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a // b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1

from functools import reduce

def chinese_remainder(n, a): # n : list of n_i, a : list of a_i 
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod

def main():
    p = 29
    # res = bruteSquareRoot(5, p)
    # print(res)

    '''
    ints = [14, 6, 11] 
    for e in ints:
        res = bruteSquareRoot(e, p)
        print(res)
    '''

    '''
    p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139
    ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]
    for i in range(len(ints)):
        res = legendreSymbole(ints[i], p)
        print(i, ':', res)
        if res == 'R':
            s = ints[i]
            print(s)

    x = pow(s,(p+1)//4,p) # https://crypto.stackexchange.com/questions/20993/significance-of-3mod4-in-squares-and-square-roots-mod-n/20994#20994
    print('sol =', x)
    '''

    # a = [2,3,5]
    # n = [5,11,17]
    # res = chinese_remainder(n, a)
    # print(res)
    n = 742449129124467073921545687640895127535705902454369756401331
    e = 3
    ct = 39207274348578481322317340648475596807303160111338236677373

    print(legendreSymbole(ct, n))


if __name__ == '__main__':
    main()